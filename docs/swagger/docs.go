// Package swagger Code generated by swaggo/swag. DO NOT EDIT
package swagger

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/v1/auth/login": {
            "post": {
                "description": "Authenticate users and return JWT token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "This endpoint is used to authenticate a users and return a JWT token to be used in subsequent requests",
                "parameters": [
                    {
                        "description": "Login credentials",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.LoginResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/responser.APIErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responser.APIErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/auth/logout": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Logout users and invalidate JWT token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "This endpoint is used to logout a users and invalidate the JWT token",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/responser.APIErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responser.APIErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/orders": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get orders by company",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "orders"
                ],
                "summary": "This endpoint is used to get orders by company",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page size",
                        "name": "page_size",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Sort by",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Tracking number",
                        "name": "tracking_number",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Location like address, city, state, postal code, etc.",
                        "name": "location",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Sort order",
                        "name": "sort_direction",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order status",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Start date",
                        "name": "start_date",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "End date",
                        "name": "end_date",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Include deleted orders",
                        "name": "include_deleted",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.PaginatedResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/responser.APIErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new order",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "orders"
                ],
                "summary": "This endpoint is used to create a new order",
                "parameters": [
                    {
                        "description": "Order information",
                        "name": "order",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.OrderCreateRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Order created successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/responser.APIErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/orders/recovery/{order_id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Restore order",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "orders"
                ],
                "summary": "This endpoint is used to restore a deleted order",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Order ID",
                        "name": "order_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Order restored successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/responser.APIErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/orders/{order_id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get order by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "orders"
                ],
                "summary": "This endpoint is used to get an order by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Order ID",
                        "name": "order_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.OrderResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/responser.APIErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete order",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "orders"
                ],
                "summary": "This endpoint is used to delete an order",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Order ID",
                        "name": "order_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Order deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/responser.APIErrorResponse"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Change order status",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "orders"
                ],
                "summary": "This endpoint is used to change the status of an order",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Order ID",
                        "name": "order_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "New status",
                        "name": "status",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.OrderResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/responser.APIErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/users/profile": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get authenticated users profile information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "This endpoint is used to get the authenticated users profile information using the JWT token",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.User"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responser.APIErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "dto.DeliveryAddressRequest": {
            "description": "Delivery destination address information",
            "type": "object",
            "required": [
                "address_line1",
                "city",
                "recipient_name",
                "recipient_phone",
                "state"
            ],
            "properties": {
                "address_line1": {
                    "description": "First line of the address\n@example \"123 Main Street\"\n@required",
                    "type": "string",
                    "example": "123 Main Street"
                },
                "address_line2": {
                    "description": "Second line of the address (optional)\n@example \"Apartment 4B\"",
                    "type": "string",
                    "example": "Apartment 4B"
                },
                "address_notes": {
                    "description": "Additional notes about the address\n@example \"Ring doorbell twice\"",
                    "type": "string",
                    "example": "Ring doorbell twice"
                },
                "city": {
                    "description": "City name\n@example \"New York\"\n@required",
                    "type": "string",
                    "example": "New York"
                },
                "postal_code": {
                    "description": "Postal or ZIP code\n@example \"10001\"",
                    "type": "string",
                    "example": "10001"
                },
                "recipient_name": {
                    "description": "Name of the person receiving the package\n@example \"John Doe\"\n@required",
                    "type": "string",
                    "example": "John Doe"
                },
                "recipient_phone": {
                    "description": "Contact phone number of the recipient\n@example \"+1234567890\"\n@required",
                    "type": "string",
                    "example": "+1234567890"
                },
                "state": {
                    "description": "State or province name\n@example \"NY\"\n@required",
                    "type": "string",
                    "example": "NY"
                }
            }
        },
        "dto.DeliveryAddressResponse": {
            "description": "Delivery address information",
            "type": "object",
            "properties": {
                "address_line1": {
                    "description": "First line of the address\n@example \"123 Main Street\"",
                    "type": "string",
                    "example": "123 Main Street"
                },
                "address_line2": {
                    "description": "Second line of the address (optional)\n@example \"Apartment 4B\"",
                    "type": "string",
                    "example": "Apartment 4B"
                },
                "city": {
                    "description": "City name\n@example \"New York\"",
                    "type": "string",
                    "example": "New York"
                },
                "latitude": {
                    "description": "Latitude coordinate\n@example 40.7128",
                    "type": "number",
                    "example": 40.7128
                },
                "longitude": {
                    "description": "Longitude coordinate\n@example -74.0060",
                    "type": "number",
                    "example": -74.006
                },
                "postal_code": {
                    "description": "Postal or ZIP code\n@example \"10001\"",
                    "type": "string",
                    "example": "10001"
                },
                "recipient_name": {
                    "description": "Name of the recipient\n@example \"John Doe\"",
                    "type": "string",
                    "example": "John Doe"
                },
                "recipient_phone": {
                    "description": "Contact phone number of the recipient\n@example \"+1234567890\"",
                    "type": "string",
                    "example": "+1234567890"
                },
                "state": {
                    "description": "State or province name\n@example \"NY\"",
                    "type": "string",
                    "example": "NY"
                }
            }
        },
        "dto.LoginRequest": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "device_info": {
                    "description": "Device information",
                    "type": "object",
                    "additionalProperties": true
                },
                "email": {
                    "description": "User email\n@example users@example.com",
                    "type": "string"
                },
                "password": {
                    "description": "User password\n@example mySecurePassword123",
                    "type": "string"
                }
            }
        },
        "dto.LoginResponse": {
            "type": "object",
            "properties": {
                "token": {
                    "description": "JWT Token\n@example eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
                    "type": "string"
                }
            }
        },
        "dto.OrderCreateRequest": {
            "description": "Request structure for creating a delivery order",
            "type": "object",
            "required": [
                "client_id",
                "company_pickup_id",
                "delivery_address",
                "delivery_deadline",
                "distance",
                "package_details",
                "pickup_contact_name",
                "pickup_contact_phone",
                "pickup_time",
                "price"
            ],
            "properties": {
                "client_id": {
                    "description": "Unique identifier of the client\n@example c7d8e9f0-3f4a-5c6b-7d8e-9f0a1b2c3d4e\n@required",
                    "type": "string",
                    "example": "c7d8e9f0-3f4a-5c6b-7d8e-9f0a1b2c3d4e"
                },
                "company_pickup_id": {
                    "description": "Unique identifier of the company pickup location\n@example a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11\n@required",
                    "type": "string",
                    "example": "a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11"
                },
                "delivery_address": {
                    "description": "Delivery destination address details\n@required",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.DeliveryAddressRequest"
                        }
                    ]
                },
                "delivery_deadline": {
                    "description": "Deadline for delivery completion\n@example 2023-05-15T16:30:00Z\n@required",
                    "type": "string",
                    "format": "date-time",
                    "example": "2023-05-15T16:30:00Z"
                },
                "delivery_notes": {
                    "description": "Additional notes for the delivery\n@example \"Please call recipient 5 minutes before arrival\"",
                    "type": "string",
                    "example": "Please call recipient 5 minutes before arrival"
                },
                "distance": {
                    "description": "Distance of the delivery in kilometers\n@minimum 0\n@example 7.2\n@required",
                    "type": "number",
                    "minimum": 0,
                    "example": 7.2
                },
                "package_details": {
                    "description": "Details about the package being delivered\n@required",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.PackageDetailRequest"
                        }
                    ]
                },
                "pickup_contact_name": {
                    "description": "Contact name for pickup location\n@example \"Jane Smith\"\n@required",
                    "type": "string"
                },
                "pickup_contact_phone": {
                    "description": "Contact phone number for pickup location\n@example \"+0987654321\"\n@required",
                    "type": "string"
                },
                "pickup_notes": {
                    "description": "Important notes about the pickup location\n@example \"Enter through loading dock\"\n@required",
                    "type": "string"
                },
                "pickup_time": {
                    "description": "Scheduled pickup time\n@example 2023-05-15T14:30:00Z\n@required",
                    "type": "string",
                    "format": "date-time",
                    "example": "2023-05-15T14:30:00Z"
                },
                "price": {
                    "description": "Price of the delivery in local currency\n@minimum 0\n@example 25.50\n@required",
                    "type": "number",
                    "minimum": 0,
                    "example": 25.5
                },
                "requires_signature": {
                    "description": "Whether recipient signature is required for delivery\n@example false",
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "dto.OrderDetailResponse": {
            "description": "Order details including price, schedule and delivery requirements",
            "type": "object",
            "properties": {
                "delivered_at": {
                    "description": "When the order was actually delivered\n@example 2023-05-15T16:15:00Z",
                    "type": "string",
                    "format": "date-time",
                    "example": "2023-05-15T16:15:00Z"
                },
                "delivery_deadline": {
                    "description": "Deadline for delivery\n@example 2023-05-15T16:30:00Z",
                    "type": "string",
                    "format": "date-time",
                    "example": "2023-05-15T16:30:00Z"
                },
                "delivery_notes": {
                    "description": "Additional notes for delivery\n@example \"Please call recipient 5 minutes before arrival\"",
                    "type": "string",
                    "example": "Please call recipient 5 minutes before arrival"
                },
                "distance": {
                    "description": "Distance to be traveled in kilometers\n@example 7.2",
                    "type": "number",
                    "example": 7.2
                },
                "pickup_time": {
                    "description": "Scheduled pickup time\n@example 2023-05-15T14:30:00Z",
                    "type": "string",
                    "format": "date-time",
                    "example": "2023-05-15T14:30:00Z"
                },
                "price": {
                    "description": "Price of the delivery\n@example 25.50",
                    "type": "number",
                    "example": 25.5
                },
                "requires_signature": {
                    "description": "Whether recipient signature is required\n@example false",
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "dto.OrderResponse": {
            "description": "Order information with all related details",
            "type": "object",
            "properties": {
                "branch_id": {
                    "description": "Branch ID where the order originated\n@example b5f8c3d1-2e59-4c4b-a6e8-e5f3c0c3d1b5",
                    "type": "string",
                    "example": "b5f8c3d1-2e59-4c4b-a6e8-e5f3c0c3d1b5"
                },
                "branch_name": {
                    "description": "Branch name\n@example \"Downtown Branch\"",
                    "type": "string",
                    "example": "Downtown Branch"
                },
                "client_id": {
                    "description": "Client ID who placed the order\n@example c7d8e9f0-3f4a-5c6b-7d8e-9f0a1b2c3d4e",
                    "type": "string",
                    "example": "c7d8e9f0-3f4a-5c6b-7d8e-9f0a1b2c3d4e"
                },
                "client_name": {
                    "description": "Client full name\n@example \"John Smith\"",
                    "type": "string",
                    "example": "John Smith"
                },
                "company_id": {
                    "description": "Company ID that owns the order\n@example a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11",
                    "type": "string",
                    "example": "a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11"
                },
                "company_name": {
                    "description": "Company name\n@example \"Express Delivery Inc.\"",
                    "type": "string",
                    "example": "Express Delivery Inc."
                },
                "created_at": {
                    "description": "When the order was created\n@example 2023-05-15T10:30:00Z",
                    "type": "string",
                    "format": "date-time",
                    "example": "2023-05-15T10:30:00Z"
                },
                "current_status": {
                    "description": "Current tracking status\n@example IN_TRANSIT",
                    "type": "string",
                    "example": "IN_TRANSIT"
                },
                "delivery_address": {
                    "description": "Delivery destination address",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.DeliveryAddressResponse"
                        }
                    ]
                },
                "detail": {
                    "description": "Details of the order",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.OrderDetailResponse"
                        }
                    ]
                },
                "driver_id": {
                    "description": "Driver ID assigned to the order\n@example d1e2f3g4-h5i6-j7k8-l9m0-n1o2p3q4r5s6",
                    "type": "string",
                    "example": "d1e2f3g4-h5i6-j7k8-l9m0-n1o2p3q4r5s6"
                },
                "driver_name": {
                    "description": "Driver full name\n@example \"Michael Johnson\"",
                    "type": "string",
                    "example": "Michael Johnson"
                },
                "estimated_arrival": {
                    "description": "Estimated time of arrival\n@example 2023-05-15T16:30:00Z",
                    "type": "string",
                    "format": "date-time",
                    "example": "2023-05-15T16:30:00Z"
                },
                "id": {
                    "description": "Unique identifier of the order\n@example a1b2c3d4-e5f6-7g8h-9i0j-k1l2m3n4o5p6",
                    "type": "string",
                    "example": "a1b2c3d4-e5f6-7g8h-9i0j-k1l2m3n4o5p6"
                },
                "last_updated": {
                    "description": "Last time the order status was updated\n@example 2023-05-15T12:45:00Z",
                    "type": "string",
                    "format": "date-time",
                    "example": "2023-05-15T12:45:00Z"
                },
                "package_detail": {
                    "description": "Details about the package",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.PackageDetailResponse"
                        }
                    ]
                },
                "pickup_address": {
                    "description": "Pickup origin address",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.PickupAddressResponse"
                        }
                    ]
                },
                "status": {
                    "description": "Current status of the order\n@example PENDING",
                    "type": "string",
                    "example": "PENDING"
                },
                "status_history": {
                    "description": "Order status history\n@example [{\"status\":\"PENDING\",\"description\":\"Order has been created\",\"updated_at\":\"2023-05-15T10:30:00Z\"}]",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.OrderStatusHistoryResponse"
                    }
                },
                "tracking_number": {
                    "description": "Tracking number for the order\n@example DEL-230512-7890",
                    "type": "string",
                    "example": "DEL-230512-7890"
                },
                "updated_at": {
                    "description": "When the order was last updated\n@example 2023-05-15T10:30:00Z",
                    "type": "string",
                    "format": "date-time",
                    "example": "2023-05-15T10:30:00Z"
                }
            }
        },
        "dto.OrderStatusHistoryResponse": {
            "type": "object",
            "properties": {
                "description": {
                    "description": "Description of the status change\n@example \"Driver has accepted the order and is heading to pickup location\"",
                    "type": "string",
                    "example": "Driver has accepted the order and is heading to pickup location"
                },
                "status": {
                    "description": "Name of the status\n@example ACCEPTED",
                    "type": "string",
                    "example": "PENDING"
                },
                "updated_at": {
                    "description": "Updated at time\n@example 2023-05-15T12:45:00Z",
                    "type": "string",
                    "format": "date-time",
                    "example": "2023-05-15T12:45:00Z"
                }
            }
        },
        "dto.PackageDetailRequest": {
            "description": "Package characteristics and handling information",
            "type": "object",
            "properties": {
                "height": {
                    "description": "Height of the package in centimeters\n@minimum 0\n@example 15",
                    "type": "number",
                    "minimum": 0,
                    "example": 15
                },
                "is_fragile": {
                    "description": "Whether the package contains fragile items\n@example true",
                    "type": "boolean",
                    "example": true
                },
                "is_urgent": {
                    "description": "Whether the package requires urgent handling\n@example false",
                    "type": "boolean",
                    "example": false
                },
                "length": {
                    "description": "Length of the package in centimeters\n@minimum 0\n@example 30",
                    "type": "number",
                    "minimum": 0,
                    "example": 30
                },
                "special_instructions": {
                    "description": "Special handling instructions\n@example \"Contains glass items, handle with care\"",
                    "type": "string",
                    "example": "Contains glass items, handle with care"
                },
                "weight": {
                    "description": "Weight of the package in kilograms\n@minimum 0\n@example 2.5",
                    "type": "number",
                    "minimum": 0,
                    "example": 2.5
                },
                "width": {
                    "description": "Width of the package in centimeters\n@minimum 0\n@example 20",
                    "type": "number",
                    "minimum": 0,
                    "example": 20
                }
            }
        },
        "dto.PackageDetailResponse": {
            "description": "Package characteristics and handling requirements",
            "type": "object",
            "properties": {
                "dimensions": {
                    "description": "Package dimensions in JSON format\n@example {\"length\":30,\"width\":20,\"height\":15,\"unit\":\"cm\"}",
                    "type": "string",
                    "example": "{\"length\":30,\"width\":20,\"height\":15,\"unit\":\"cm\"}"
                },
                "is_fragile": {
                    "description": "Whether the package contains fragile items\n@example true",
                    "type": "boolean",
                    "example": true
                },
                "is_urgent": {
                    "description": "Whether the package requires urgent handling\n@example false",
                    "type": "boolean",
                    "example": false
                },
                "special_instructions": {
                    "description": "Special handling instructions\n@example \"Contains glass items, handle with care\"",
                    "type": "string",
                    "example": "Contains glass items, handle with care"
                },
                "weight": {
                    "description": "Weight of the package in kilograms\n@example 2.5",
                    "type": "number",
                    "example": 2.5
                }
            }
        },
        "dto.PaginatedResponse": {
            "description": "Paginated data response with metadata about pagination",
            "type": "object",
            "properties": {
                "data": {
                    "description": "The actual data items\n@example [{\"id\":\"a1b2c3d4\",\"tracking_number\":\"DEL-230512-7890\"}]"
                },
                "page": {
                    "description": "Current page number\n@example 1",
                    "type": "integer",
                    "example": 1
                },
                "page_size": {
                    "description": "Number of items per page\n@example 20",
                    "type": "integer",
                    "example": 20
                },
                "total_items": {
                    "description": "Total number of items across all pages\n@example 100",
                    "type": "integer",
                    "example": 100
                },
                "total_pages": {
                    "description": "Total number of pages\n@example 5",
                    "type": "integer",
                    "example": 5
                }
            }
        },
        "dto.PickupAddressResponse": {
            "description": "Pickup address information",
            "type": "object",
            "properties": {
                "address_line1": {
                    "description": "First line of the address\n@example \"456 Business Ave\"",
                    "type": "string",
                    "example": "456 Business Ave"
                },
                "address_line2": {
                    "description": "Second line of the address (optional)\n@example \"Suite 300\"",
                    "type": "string",
                    "example": "Suite 300"
                },
                "address_notes": {
                    "description": "Additional notes about the address\n@example \"Enter through loading dock\"",
                    "type": "string",
                    "example": "Enter through loading dock"
                },
                "city": {
                    "description": "City name\n@example \"Chicago\"",
                    "type": "string",
                    "example": "Chicago"
                },
                "contact_name": {
                    "description": "Name of the contact person at pickup location\n@example \"Jane Smith\"",
                    "type": "string",
                    "example": "Jane Smith"
                },
                "contact_phone": {
                    "description": "Contact phone number at pickup location\n@example \"+0987654321\"",
                    "type": "string",
                    "example": "+0987654321"
                },
                "formatted_address": {
                    "description": "Full formatted address\n@example \"456 Business Ave, Suite 300, Chicago, IL 60606\"",
                    "type": "string",
                    "example": "456 Business Ave, Suite 300, Chicago, IL 60606"
                },
                "latitude": {
                    "description": "Latitude coordinate\n@example 41.8781",
                    "type": "number",
                    "example": 41.8781
                },
                "longitude": {
                    "description": "Longitude coordinate\n@example -87.6298",
                    "type": "number",
                    "example": -87.6298
                },
                "postal_code": {
                    "description": "Postal or ZIP code\n@example \"60606\"",
                    "type": "string",
                    "example": "60606"
                },
                "state": {
                    "description": "State or province name\n@example \"IL\"",
                    "type": "string",
                    "example": "IL"
                }
            }
        },
        "entities.Profile": {
            "type": "object",
            "properties": {
                "additional_info": {
                    "type": "string"
                },
                "birth_date": {
                    "type": "string"
                },
                "document_number": {
                    "type": "string"
                },
                "document_type": {
                    "type": "string"
                },
                "emergency_contact_name": {
                    "type": "string"
                },
                "emergency_contact_phone": {
                    "type": "string"
                },
                "profile_picture_url": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "entities.Role": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "is_active": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "entities.User": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "deleted_at": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "email_verified_at": {
                    "type": "string"
                },
                "full_name": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "is_active": {
                    "type": "boolean"
                },
                "phone": {
                    "type": "string"
                },
                "phone_verified_at": {
                    "type": "string"
                },
                "profile": {
                    "$ref": "#/definitions/entities.Profile"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entities.UserRole"
                    }
                },
                "sessions": {
                    "description": "Relationships",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entities.UserSession"
                    }
                }
            }
        },
        "entities.UserRole": {
            "type": "object",
            "properties": {
                "assigned_at": {
                    "type": "string"
                },
                "assigned_by": {
                    "type": "string"
                },
                "auth": {
                    "description": "Relationships",
                    "allOf": [
                        {
                            "$ref": "#/definitions/entities.Role"
                        }
                    ]
                },
                "role_id": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "entities.UserSession": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "device_info": {
                    "type": "string"
                },
                "expires_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "ip_address": {
                    "type": "string"
                },
                "last_activity": {
                    "type": "string"
                },
                "token": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "responser.APIError": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string"
                },
                "details": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "responser.APIErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "$ref": "#/definitions/responser.APIError"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
